[{"slug":"about","title":"About","description":"Some things about me","body":"\n<PageSubHead>\nMy name is Gadzhi. Born in <a href=\"https://wikipedia.org/wiki/Dagestan\">Dagestan</a>,\nliving in Moscow.<br /> Designing software is what I do for work and joy.\n</PageSubHead>\n\n## Work\n\n#### Retool (2021--)\n\nI'm currently working as a design engineer at [Retool](https://retool.com).\n\n#### Webflow (2015--2021)\n\nWorked at [Webflow](https://webflow.com) -- a platform that makes producing for\nweb more approachable. Focused on figuring out how to create the right visual\ntools for designers.<br/>\n**[Learn more about my work at Webflow →](/work/webflow)**\n\n#### Stampsy (2012--2014)\n\nWorked as a designer (and partly as a front-end engineer) at\n[Stampsy](https://stampsy.com) -- a small web platform for creating and\ndiscovering visual stories. I designed the product and built a modular CSS\narchitecture behind it.<br/>\n**[Learn more about my work Stampsy →](/work/stampsy)**\n\n## Game design\n\nI got interested in video game design and development. It's a fun area that is\nhard to master and I try to spend my free time tinkering with various personal\nprojects. I have a [dlog](/dlog) where I sometimes post (rough) updates on this\njourney.\n\nI also enjoy reading about game design theory and practice. Here's a collection\nof my favorite [game design books and resources](/notes/gamedesign-resources).\n\n## Programming\n\nWhen it comes to programming, I'm a master of none. Tinkering with code has been\na big part of my life for as long as I remember and it still brings me joy and\nmakes time pass faster.\n\nWhether it's making design prototypes with JavaScript at work, making games with\nGodot or Unity, writing shell scripts for my\n[Linux desktop](https://github.com/kkga/dotfiles) or making little CLI apps with\nGo, I love it all and always try to learn more. I put occasionally useful things\non [my GitHub](https://github.com/kkga).\n\n<FaceAndLinks />\n\n---\n\n### This website\n\n...is fairly simple. Written mostly in markdown, generated by\n[Astro](https://astro.build/) (which lets me use a few React components) and\ndeployed to [Vercel](https://vercel.com/).\n\nThe typefaces are set in\n[MD Nichrome](https://www.mass-driver.com/typefaces/md-nichrome) and\n[MD IO](https://www.mass-driver.com/typefaces/md-io).\n\nSource code is available [on GitHub](https://github.com/kkga/kkga). You can\nfreely clone it and use as a base for your own website.\n"},{"slug":"now","title":"Now","description":"What I'm up to these days","body":"\nThis is a [\"/now\"](https://nownownow.com/about) page. You should have one too.\n\n### Tinkering with hardware\n\nI've been slowly trying out various weird custom keyboards over the past year or\nso. I'm currently planning to build a couple of barebones minimalistic 34-key\nboards, as that's the number of keys that I'm using for my layout at the moment.\n\n### Tinkering with software\n\nStill enjoying Go and maintaining a couple of CLI programs I wrote with it, but\nI've been interested in Clojure for a while and want to learn more about it.\n\n### Playing\n\nDeathloop. It's one of the best games I've ever played. Also waiting for Elden\nRing to come out in February.\n\n### Reading\n\nMostly technical/programming books.\n"},{"slug":"uses","title":"Uses","description":"My setup","body":"\n### Hardware\n\n- Lenovo X1 Carbon Gen 9\n- Custom PC with Ryzen 3600 cpu\n- iPad Pro 11\n\n### Software\n\n- Arch Linux on laptop\n- Void Linux on desktop\n- Sway (window manager)\n- Foot (terminal)\n- Kakoune (text editor)\n"},{"slug":"functional-javascript","title":"Functional JavaScript","description":"Notes from Functional JavaScript First Steps lections","tags":["programming","javascript"],"body":"\n#### Resources\n\n- [Course on Frontend Masters](https://frontendmasters.com/courses/functional-first-steps)\n- [Observable notebooks](https://observablehq.com/collection/@anjana/functional-javascript-first-steps)\n\n---\n\n## Pure functions\n\n### Avoid side effects\n\nDo nothing but return output based on nothing but input.\n\n### Imperative\n\n```javascript\nlet name = \"Alonzo\";\nlet greeting = \"Hi\";\n\nconsole.log(`${greeting}, ${name}!`);\n// Hi, Alonzo!\n\ngreeting = \"Howdy\";\nconsole.log(`${greeting}, ${name}!`);\n// Howdy, Alonzo!\n```\n\n### Functional\n\n```javascript\nfunction greet(greeting, name) {\n  return `${greeting}, ${name}!`;\n}\n\ngreet(\"Hi\", \"Alonzo\");\n// \"Hi, Alonzo!\"\n\ngreet(\"Howdy\", \"Alan\");\n// \"Howdy, Alan!\n```\n\n### Side effects\n\n```javascript\nlet thesis = { name: \"Church's\", date: 1936 };\n\nfunction renameThesis(newName) {\n  thesis.name = newName;\n  console.log(\"Renamed!\");\n}\n\nrenameThesis(\"Church-Turing\"); // Renamed!\nthesis; //{name: \"Church-Turing\", date: 1936}\n```\n\n### No side effects\n\n```javascript\nconst thesis = { name: \"Church's\", date: 1936 };\n\nfunction renameThesis(oldThesis, newName) {\n  return {\n    name: newName,\n    date: oldThesis.date,\n  };\n}\n\nconst thesis2 = renameThesis(thesis, \"Church-Turing\");\nthesis; // {name: \"Church's\", date: 1936}\nthesis2; // {name: \"Church-Turing\", date: 1936}\n```\n\n---\n\n## Recursion\n\n- **Iteration** -- imperative, looping, stateful\n- **Recursion** -- functional, self-referential, stateless\n\n### Iteration\n\n```javascript\nfunction sum(numbers) {\n  let total = 0;\n  for (i = 0; i < numbers.length; i++) {\n    total += numbers[i];\n  }\n  return total;\n}\n\nsum([0, 1, 2, 3, 4]); // 10\n```\n\n### Recursion\n\n```javascript\nfunction sum(numbers) {\n  if (numbers.length === 1) {\n    // base case\n    return numbers[0];\n  } else {\n    // recursive case\n    return numbers[0] + sum(numbers.slice(1));\n  }\n}\n\nsum([0, 1, 2, 3, 4]); // 10\n```\n\nRecursive functions have two parts:\n\n- base case: condition which makes the function return an output without making\n  a recursive call;\n- recursive case: condition which makes the function call itself.\n\n### Iteration\n\n```javascript\nfunction iterativeFibonacci(n) {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n\n  let previous = 0;\n  let current = 1;\n  for (let i = n; i > 1; i--) {\n    let next = previous + current;\n    previous = current;\n    current = next;\n  }\n  return current;\n}\n```\n\n### Recursion\n\n```javascript\nfunction recursiveFibonacci(n) {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return recursiveFibonacci(n - 2) + recursiveFibonacci(n - 1);\n}\n```\n\n---\n\n## Higher-order function\n\nThe higher-order functions `filter()`, `map()`, and `reduce()` are three of the\nmost useful tools in a functional programmer's toolbox. Let's dig into how they\nwork & how to use them.\n\nLink to my fork of exercises on Observable:\nhttps://observablehq.com/d/3003212404713bcf\n\n### Filter\n\nThe filter function takes a \"predicate\" function (a function that takes in a\nvalue and returns a boolean) and an array, applies the predicate function to\neach value in the array, and returns a new array with only those values for\nwhich the predicate function returns true.\n\nHere's a recursive implementation of the `filter()` function:\n\n```javascript\nfunction filter(predicateFn, array) {\n  // base case\n  if (length(array) === 0) return [];\n  // recursive case\n  const firstItem = head(array);\n  const filteredFirst = predicateFn(firstItem) ? [firstItem] : [];\n  return concat(filteredFirst, filter(predicateFn, tail(array)));\n}\n```\n\n```javascript\nwholes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\ngreaterThanFour = filter(\n  (n) => n > 4,\n  wholes,\n);\n// greaterThanFour is [5,6,7,8,9,10]\n```\n\n### Map\n\nThe map function takes a one-argument function and an array, and applies the\nfunction to each element in the array, returning a new array of the resulting\nvalues.\n\n```javascript\nfunction map(fn, array) {\n  // base case\n  if (length(array) === 0) return [];\n  // recursive case\n  const first = head(array);\n  const mappedFirst = [fn(first)];\n  return concat(mappedFirst, map(fn, tail(array)));\n}\n```\n\n```javascript\nwholes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\ndoubled = map((n) => n * 2, wholes);\n// doubled is [0,2,4,6,8,10,12,14,16,18,20]\n```\n\n```javascript\nwholes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nfizzBuzz = map((n) => {\n  const fizz = n % 3 === 0 ? \"fizz\" : \"\";\n  const buzz = n % 5 === 0 ? \"buzz\" : \"\";\n  return fizz || buzz ? fizz + buzz : n;\n}, wholes);\n// fizzBuzz is [fizzbuzz,1,2,fizz,4,buzz,fizz,7,8,fizz,buzz]\n```\n\n### Reduce\n\nThe `reduce` function is the odd one of the bunch. Unlike `filter` and `map`,\nwhich each take an array and return another array, reduce takes in an array and\nreturns a single value - in other words, it \"reduces\" an array to a single\nvalue.\n\n`reduce` takes three arguments:\n\n- a \"reducer\" function, which takes two arguments - an accumulator and the next\n  value from the array - and returns a single value. This function will be\n  applied to each value in the array, with the accumulator storing the reduced\n  value so far.\n- an initial value, passed to the first call of the reducer function\n- the array to reduce\n\n```javascript\nfunction reduce(reducerFn, initialValue, array) {\n  // base case\n  if (length(array) === 0) return initialValue;\n  // recursive case\n  const newInitialValue = reducerFn(initialValue, head(array));\n  return reduce(reducerFn, newInitialValue, tail(array));\n}\n```\n\n```javascript\nwholes = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nsum = reduce((accumulator, value) => accumulator + value, 0, wholes);\n// sum is 55\n```\n\n```javascript\nmax = reduce(\n  (accumulator, value) => (value > accumulator ? value : accumulator),\n  0,\n  [7, 1, 3, 5, 6, 2, 8, 10, 0, 4, 9],\n);\n// sum is 10\n```\n"},{"slug":"gamedesign-resources","title":"Game design resources","description":"Collection of articles, books, videos and other things I found useful.","tags":["gamedev"],"body":"\nAll of these resouces are five-star. I've marked my favorites with an extra star\n(*).\n\n### Classics\n\n- [I Have No Words & I Must Design (pdf)](http://www.costik.com/nowords2002.pdf)\n  by Greg Costikyan\n- [Don't Be a Vidiot](http://www.costik.com/vidiot.html) by Greg Costikyan\n- [MDA: A Formal Approach to Game Design and Game Research (pdf)](https://www.cs.northwestern.edu/~hunicke/MDA.pdf)\n  by Robin Hunicke, Marc LeBlanc, Robert Zubek\n\n### Posts\n\n- [The Chemistry Of Game Design](https://www.gamasutra.com/view/feature/1524/the_chemistry_of_game_design.php)\n  by [Daniel Cook](https://twitter.com/danctheduck)\n- [Design 101](https://www.gamasutra.com/blogs/DanFelder/20150413/240853/Design_101_Design_Goals.php)\n  series by [Dan Felder](https://twitter.com/DesignerDanF)\n\n### Talks\n\n- [Practical Creativity](https://www.youtube.com/watch?v=zyVTxGpEO30) by\n  [Raph Koster](https://twitter.com/raphkoster) (*)\n- [Magic: The Gathering: Twenty Years, Twenty Lessons Learned](https://youtu.be/QHHg99hwQGY)\n  by [Mark Rosewater](https://en.wikipedia.org/wiki/Mark_Rosewater) (*)\n- [Game Design Theory I Wish I had Known When I Started](https://youtu.be/qwPe3OHR04c)\n  by [Daniel Cook](http://www.lostgarden.com/)\n- [Storytime, PAX East 2016](https://youtu.be/UwBl7Rnkt78) by\n  [Jonathan Blow](https://twitter.com/jonathan_blow)\n- [Indie Prototyping](https://youtu.be/ISutk1mauPM) by\n  [Jonathan Blow](https://twitter.com/jonathan_blow)\n- [Cursed Problems in Game Design](https://youtu.be/8uE6-vIi1rQ) by Alex Jaffe\n\n### Books\n\n- [Designing Games](https://tynansylvester.com/book/) by\n  [Tynan Sylverster](https://twitter.com/TynanSylvester) (*)\n- [A Theory of Fun for Game Design](https://www.theoryoffun.com) by\n  [Raph Koster](https://twitter.com/raphkoster)\n- [Game Feel](http://www.game-feel.com) by Steve Swink\n- [Game Mechanics: Advanced Game Design](https://www.goodreads.com/book/show/13705461-game-mechanics)\n  by Ernest Adams, Joris Dormans\n- [Games, Design & Play](http://www.gamesdesignandplay.com/) by Colleen Macklin,\n  John Sharp\n\n### Courses\n\n- [Game Design Concepts](https://gamedesignconcepts.wordpress.com) by\n  [Ian Schreiber](https://twitter.com/IanSchreiber)\n- [Game Balance Concepts](https://gamebalanceconcepts.wordpress.com) by\n  [Ian Schreiber](https://twitter.com/IanSchreiber)\n"},{"slug":"go","title":"Go","tags":["programming","go"],"body":"\n## Resources\n\n### Official\n\n- https://golang.org/doc/code.html\n- https://golang.org/doc/effective_go.html\n- https://golang.org/doc/\n- https://tour.golang.org\n- https://learn.go.dev/\n\n### Unofficial\n\n- https://www.digitalocean.com/community/tutorial_series/how-to-code-in-go\n- https://gophercises.com/\n- https://golangresources.com\n- https://yourbasic.org/golang/\n- https://exercism.io/my/tracks/go\n- https://github.com/go-training/training\n- (*) https://dave.cheney.net/practical-go\n\n### Books\n\n- https://bitfieldconsulting.com/books\n- https://interpreterbook.com/\n- https://github.com/karlseguin/the-little-go-book\n- https://github.com/quii/learn-go-with-tests\n\n## Misc\n\n- code organization notes:\n  https://dave.cheney.net/2014/12/01/five-suggestions-for-setting-up-a-go-project\n\n## Interesting projects\n\n- https://github.com/spf13/afero\n"},{"slug":"kak-sessions","title":"Automatic sessions in Kakoune","description":"Writing a small wrapper script to automate session management","tags":["kakoune","setup"],"body":"\n**Update, 16 Sep 2021**: this functionality is now included in\n[kks](/projects/kks), so I don't use the script provided below anymore.\n\n---\n\n[Kakoune](https://github.com/mawww/kakoune) has a client-server architecture,\nwhich makes it easy to integrate with other tools.\n\nFor example, starting a new session with:\n\n```shell\nkak -s myproject\n```\n\n... lets you connect a new client to it with:\n\n```shell\nkak -c myproject\n```\n\n... or send commands to the given client as stdin to the session:\n\n```shell\necho eval -client client0 edit README.md | kak -p myproject\n```\n\nThis makes integration with other tools possible. For example, you could pick a\nfile in a terminal with fzf and open it in a given client and session with:\n\n```shell\nfzf | xargs -I {} echo eval -client client0 edit '{}' | kak -p myproject\n```\n\n---\n\nDoing that by hand is not the way to go, so you would either write scripts for\nthis or just use [kakoune.cr](https://github.com/alexherbo2/kakoune.cr) (kcr),\nwhich is a brilliant tool that removes the need to handle all of this manually.\n\nHowever, the actual management of sessions is still up to the user. Simply\nrunning `kak my_file` will always create a new session to open the given file.\nWith kcr, you can set the\n[context](https://github.com/alexherbo2/kakoune.cr#how-does-it-work) for any\ncommand to execute in the relevant session/client, but you still need to create\nthat session upfront.\n\nMost of the time, I ended up having multiple Kakoune windows editing related\nfiles in separate, disconnected sessions, because I forgot creating a single\nsession for the project upfront. This makes navigating buffers and overall\nworkflow frustrating.\n\n---\n\nAs a solution, I've been using the following wrapper script (`kaks`) as a global\n`EDITOR` value in shell. It automates session handling based on where it's\ncalled:\n\n- if there is a kcr session in context (`KAKOUNE_SESSION` is set), it passes the\n  arguments to it, so programs connected with kcr work as expected;\n- if the file is inside git directory, it tries to connect to an existing\n  session based on directory name or creates a new one;\n- otherwise, it just uses the `default` session, which in my case is\n  automatically started by desktop with the following script:\n  [kakdaemon](https://github.com/kkga/dotfiles/blob/master/.local/libexec/kakdaemon).\n\nHere is the full script\n([file on GitHub](https://github.com/kkga/dotfiles/blob/master/.local/bin/kaks)):\n\n```shell\n#!/bin/sh\n# Kakoune wrapper. Used as \"EDITOR=kaks\".\n# Uses kcr (https://github.com/alexherbo2/kakoune.cr) session, if it exists.\n# Otherwise, if inside a git directory, creates or connects to an existing session for it.\n# Otherwise, uses the 'default' session, which is started automatically by desktop.\n\nwait_for_session() {\n\tsession=$1\n\t# Wait for session\n\t# Grep in quiet mode with fixed strings and whole line switches\n\twhile ! kak -l | grep -q -F -x \"$session\"; do\n\t\tsleep 0.1\n\tdone\n}\n\nkak -clear # clear dead sessions\n\n# if there's a krc session, just use it\nif [ -n \"$KAKOUNE_SESSION\" ]; then\n\tkcr edit \"$@\"\n# if the file is inside a git dir, try connect to a an existing session based on directory name or create a new one\nelif [ \"$(git rev-parse --show-toplevel 2> /dev/null)\" ]; then\n\tgit_dir=$(basename \"$(git rev-parse --show-toplevel | tr -d '.')\")\n\texisting_session=$(kak -l | grep \"$git_dir\")\n\t[ -z \"$existing_session\" ] && setsid kak -d -s \"$git_dir\" &\n\twait_for_session \"$git_dir\"\n\tkak -c \"$git_dir\" \"$@\"\n# Otherwise use the 'default' session\nelse\n\tkak -c \"default\" \"$@\"\nfi\n```\n\nI've been using this setup for a few months and it completely removed the need\nto manually handle sessions in my case.\n\nEvery time I start working on a git-tracked project or open a file inside it\nfrom terminal, the correct session is selected or created automatically.\n"},{"slug":"kakoune-snippets","title":"Poor man's snippets in Kakoune","tags":["kakoune","setup"],"body":"\nI wanted a simple, no-plugins solution for inserting various bits of text into\nthe buffer. Here's what I came up with.\n\nI have a folder of snippet files at `~/.config/kak/snippets/`. Each file is a\n`.txt` with the contents of what I want inserted. For example, here's a snippet\nfor inserting a YAML frontmatter in markdown files.\n\n```\n---\ntitle: $1\ndate: $2\ntags: $3\n--\n```\n\nFor inserting these snippets, I came up with the following Kakoune command:\n\n```\ndefine-command insert-snippet -params 1 -menu -shell-script-candidates %{\n    fd --type file . ~/.config/kak/snippets/ | awk -F '/' '{print $NF}'\n} %{ execute-keys \"|cat ~/.config/kak/snippets/%arg{1}<ret>s\\$\\d<ret>n\"\n} -docstring \"poor man's snippets\"\n```\n\nIt populates the command completion menu with filenames from the snippets\nfolder. Once a snippet is selected:\n\n- it inserts file contents into the buffer;\n- selects all patterns matching `\\$\\d` (`$1`, `$2`, etc);\n- moves to the first selected pattern.\n\nI can then press `c` to change the content of `$1` and press `n` to select the\nnext placeholder for changing.\n\nIdeally, it would also automatically change the date placeholder with the output\nof `date`, but for now I'm just using a separate `insert-date` command for that:\n\n```\ndefine-command insert-date %{\n    execute-keys -draft \"|date +%%Y-%%m-%%d<ret>\"\n} -docstring 'insert current date'\n```\n"},{"slug":"laptop-void","title":"Running Void Linux on a laptop","tags":["software","linux","void"],"body":"\n![Sway running on Void Linux](/img/notes/laptop-sway-void.png)\n\n## Hardware\n\n- ThinkBook 13s G2-ITL\n\n## Kernel\n\n- blacklist `ideapad_laptop` module in `modprobe.d` (old module that isn't\n  useful anymore);\n  - update 2021-04-11: as of Linux 5.11, removed the blacklist -- module is not\n    loaded automatically anymore\n\n## Power management\n\n- enable `acpid`, if not enabled;\n- install `tlp`, enable its service;\n- configure `elogind` to ignore ACPI events: set all `Handle*` keywords to\n  `ignore` in logind.conf;\n- use `powertop` to diagnose powerusage;\n\n## Network\n\n- note: iwlwifi spams some errors in dmesg, seem to work fine though\n  (`iwlwifi: Unhandled alg: 0x71b`);\n- disable `wpa_supplicate` service, if enabled;\n- ~~install `connman`, enable service, configure via `connmanctl;`~~ upd:\n  `connman` seems unstable and noisy;\n- ended up using `dhcpcd` + `iwd`;\n  - had to add `UseDefaultInterface=true` in `[General]` section of\n    `/etc/iwd/main.conf`, according to Void's\n    [handbook](https://docs.voidlinux.org/config/network/iwd.html#troubleshooting).\n\n## Graphics\n\n- mesa works out of the box;\n- for vulkan, install `mesa-vulkan-intel`;\n\n## Sound\n\n- note: initially had issues with sound device not working: had to add\n  `options snd_hda_intel dmic_detect=0` in `modprobe.d`;\n  - update 2021-04-11: as of Linux 5.11, removed any extra options -- both audio\n    and mic work fine\n- install `pipewire`, enable `pipewire-pulse` in pipewire config;\n- start `pipewire` as a user on desktop login;\n  - note: maybe create a user runit service for it;\n\n## Desktop\n\n- currently running a pure Wayland (xwayland disabled) desktop with Sway -- no\n  issues so far;\n- `elogind` and `dbus` are required for Sway;\n- start sway with `dbus-run-session sway`;\n  - `libseat` might show an error about `seatd` not present, can be removed by\n    exporting `LIBSEAT_BACKEND=logind` before starting Sway\n"},{"slug":"lua","title":"Lua","tags":["programming"],"body":"\n## Resources\n\n- <http://tylerneylon.com/a/learn-lua/>\n- <https://www.lua.org/pil/contents.html>\n- <http://lua-users.org/wiki/LuaDirectory>\n- <https://github.com/nanotee/nvim-lua-guide#learning-lua>\n- <https://www.quora.com/Is-Lua-a-good-language-to-learn/answer/Hayden-Jones-3>\n- <https://fennel-lang.org/lua-primer>\n\n## tools\n\n- testing: http://olivinelabs.com/busted/\n"},{"slug":"nixos","title":"NixOS","tags":["software","linux"],"body":"\n[NixOS](https://nixos.org/) is a linux distribution with a unique approach to\npackage and configuration management. Built on top of the Nix package manager,\nit is completely declarative.\n\n## Config examples\n\n- https://github.com/monadplus/nixconfig/blob/master/home.nix\n- i3 setup: http://johnduhamel.io/posts/2019-01-29-nixos-i3-setup.html\n- https://github.com/alexherbo2/configuration/blob/master/etc/nixos/configuration.nix\n\n## See also\n\n- https://nixos.wiki/wiki/Cheatsheet\n"},{"slug":"pushdown-state-machine-in-godot","title":"Pushdown automata in Godot","tags":["gamedev","godot"],"body":"\n```gdscript\n# StateMachine.gd\n\nclass_name StateMachine\nextends Node\n\nsignal transitioned(state_path)\n\nexport var initial_state := NodePath()\n\nonready var state: State = get_node(initial_state) setget set_state\n\nvar _stack := []\nvar _state_name := \"\"\n\n\nfunc _init() -> void:\n\tadd_to_group(\"state_machine\")\n\n\nfunc _ready() -> void:\n\tyield(owner, \"ready\")\n\t_stack.push_front(initial_state)\n\tstate.enter()\n\n\nfunc _unhandled_input(event: InputEvent) -> void:\n\tstate.unhandled_input(event)\n\n\nfunc _process(delta: float) -> void:\n\tstate.process(delta)\n\n\nfunc _physics_process(delta: float) -> void:\n\tstate.physics_process(delta)\n\n\nfunc transition_to(target_state_path: String, msg := {}) -> void:\n\tif not has_node(target_state_path):\n\t\treturn\n\tvar target_state := get_node(target_state_path)\n\tstate.exit()\n\tself.state = target_state\n\tstate.enter(msg)\n\temit_signal(\"transitioned\", target_state_path)\n\n\nfunc push_state(state_path: String, msg := {}) -> void:\n\t_stack.push_front(state_path)\n\ttransition_to(state_path, msg)\n\n\nfunc pop_state() -> void:\n\t_stack.pop_front()\n\ttransition_to(_stack[0])\n\n\nfunc set_state(value: State) -> void:\n\tstate = value\n\t_state_name = state.name\n```\n\n```gdscript\n# State.gd\n\nclass_name State\nextends Node\n\nonready var _state_machine := _get_state_machine(self)\n\nvar _superstate: State = null\n\n\nfunc _ready() -> void:\n\tyield(owner, \"ready\")\n\tif not get_parent().is_in_group(\"state_machine\"):\n\t\t_superstate = get_parent()\n\n\nfunc unhandled_input(event: InputEvent) -> void:\n\treturn\n\n\nfunc process(delta: float) -> void:\n\treturn\n\n\nfunc physics_process(delta: float, msg := {}) -> void:\n\treturn\n\n\nfunc enter(msg := {}) -> void:\n\treturn\n\n\nfunc exit() -> void:\n\treturn\n\n\nfunc _get_state_machine(node: Node) -> Node:\n\tif node != null and not node.is_in_group(\"state_machine\"):\n\t\treturn _get_state_machine(node.get_parent())\n\treturn node\n```\n"},{"slug":"rust","title":"Rust resources","tags":["software","programming"],"body":"\n## courses/books\n\n- Cli apps book: <https://rust-cli.github.io/book/tutorial/index.html>\n- (\\*) Interactive tour: <https://tourofrust.com/57_en.html>\n- Gentle intro: <http://stevedonovan.github.io/rust-gentle-intro/readme.html>\n- (\\*) Cli course: <https://github.com/hariamoor/todo-cli>\n- Rust 101: <https://www.ralfj.de/projects/rust-101/main.html#section-0>\n- Intro: <https://fasterthanli.me/articles/a-half-hour-to-learn-rust>\n- (\\*) <https://livevideo.manning.com/module/42_1_1/rust-in-motion/>\n- sokoban: <https://github.com/iolivia/rust-sokoban>\n- (\\*) roguelike 1:\n  <https://bfnightly.bracketproductions.com/rustbook/chapter_0.html>\n- roguelike 2: <http://tomassedovic.github.io/roguelike-tutorial/>\n- roguelike 3:\n  <https://aimlesslygoingforward.com/blog/2019/02/09/writing-a-rust-roguelike-for-the-desktop-and-the-web/>\n\n## collections\n\n- <https://github.com/ctjhoa/rust-learning>\n- <https://ferrous-systems.com/blog/omg-wtf-rs-resources-to-help-you-get-started-with-rust/>\n- <https://github.com/rust-unofficial/awesome-rust#resources>\n\n## code examples\n\n- <https://doc.rust-lang.org/rust-by-example/index.html>\n\n## misc\n\n- <https://cheats.rs/#traits>\n- <https://jrvidal.github.io/explaine.rs/>\n- <https://rust-analyzer.github.io/>\n- <https://github.com/ferrous-systems/teaching-material>\n"},{"slug":"spectrwm","title":"Spectrwm","description":"Notes on my favorite window manager","tags":["software","linux"],"body":"\n## what I like\n\n- overall “lightweight-ness” and simplicity;\n- the master/stack model works pretty much like\n  [dwm](https://dwm.suckless.org/), which is perfect;\n- great set of options, so achieving the same workflow I had on dwm is easy;\n- plain text configuration file;\n- single tag-set across multiple monitors;\n\n## don’t like\n\n- the built-in bar is great, but lacks a system tray;\n"},{"slug":"vim","title":"Vim","description":"Text editor for life","tags":["software","vim"],"body":"\nIf I had to choose one single piece of software, I'd choose\n[Vim](https://en.wikipedia.org/wiki/Vim_(text_editor)).\n\nI've only been a Vim user for a couple years, but I think I'm going to use it\n(or some future reincarnation of it) for the rest of my life. It takes a while\nto form this relationship, but once you get past the initial frustration and\nstart [speaking its language][grok-vi] -- nothing else can transfer your\nthoughts into the computer as efficiently and effortlessly.\n\n## Getting comfortable with Vim\n\nAssuming you’re on a Unix-like operating system, you likely have a great Vim\nlearning tool in the command line ready. Open the terminal and type:\n\n    $ vimtutor\n\nWork through it, more than once. This is what has been the most effective for\nme.\n\nAfter getting through the initial valley of despair, start sculpting [your own\n.vimrc][vimrc].\n\nIf you're more of a video tutorial person, thoughtbot has a nice consise course\n[here][thoughtbot].\n\n[grok-vi]:\n  http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim/1220118#1220118\n[vimrc]: https://github.com/romainl/idiomatic-vimrc\n[thoughtbot]: https://thoughtbot.com/upcase/onramp-to-vim\n"},{"slug":"void-linux","title":"Void Linux","description":"Notes on setting up a comfortable desktop","tags":["software","linux","void"],"body":"\nAfter going through a variety of Linux distributions (from PopOS/Fedora to Arch\nand NixOS), I’ve settled on [Void Linux][void]. It’s a great blend of stability\nand simplicity with rolling-release model.\n\n[void]: https://voidlinux.org/\n\n## Installation\n\nVoid install process is straightforward: follow the steps in the TUI installer.\nI’ve used the base minimal ISO without any desktop environments.\n\n## Initial setup\n\nVoid has an excellent [handbook][void-handbook] that covers everything you need\nto know in order to setup a working system.\n\n## Package management\n\nThe package manager in Void is [xbps](/notes/xbps). It’s a collection of several\nprograms for performing various tasks. It’s fast and reliable: I’ve never had\nany problems during upgrades.\n\nWhile it’s useful to get comfortable interacting with the package manager\ndirectly, Void also provides a collection of handy helper scripts under the\n`xtools` package:\n\n| Command                 | Description                                                |\n| ----------------------- | ---------------------------------------------------------- |\n| `xi`                    | install a package                                          |\n| `xi -Su`                | update all packages                                        |\n| `xrs`                   | search for packages in the repos                           |\n| `xq`                    | query info about an installed package                      |\n| `xq -R`                 | query remote repos                                         |\n| `xcheckrestart`         | list programs using outdated libraries (use after updates) |\n| `xlocate`               | locate a specific file in packages                         |\n| `xlocate -S`            | sync with remote database                                  |\n| `xls`                   | list files of a package                                    |\n| `xmandoc`               | read manpage of any (non-installed) package                |\n| `xpkg`                  | list all installed packages                                |\n| `xpkg -m`               | list only manually installed                               |\n| `xpkg -O`               | list orphans                                               |\n| `xpkg -m > pkglist.txt` | dump all manually installed packages into a text file      |\n\nSee [manpage](https://man.voidlinux.org/xtools) for `xtools` for more info.\n\n## Backups\n\n### System snapshots\n\nIf using BTRFS filesystem, `snapper` can be set up for automatic snapshot\ncreation.\n\n1. Install `snapper` and `snooze`.\n\n```shell\n$ xbps-install -S snapper snooze\n```\n\n2. Generate a default config for `snapper` (see `snapper --help`).\n3. Activate `snooze` services for daily and hourly tasks.\n\n```shell\n$ ln -s /etc/sv/snooze-daily /var/service\n$ ln -s /etc/sv/snooze-hourly /var/service\n```\n\n### List of manually installed packages\n\nAutomatically update list of installed packages daily with `snooze`:\n\n```shell\n$ xbps-install -S snooze\n$ ln -s /etc/sv/snooze-daily /var/service # activate snooze service for daily tasks\n$ echo '#!/bin/sh' >> /etc/cron.daily/pkglist-update\n$ echo 'xpkg -m > /home/kkga/void-pkglist.txt' >> /etc/cron.daily/pkglist-update\n```\n\n## Daemons (runit)\n\nVoid's handbook has a section on [how runit works][runit].\n\nOne thing to note though, is how trivial it is to create user services for\nprograms you want to run as daemons. Check the dedicated section on\n[user-services][user-services].\n\n---\n\n## Miscellaneous notes\n\nThese are mostly for myself and are not directly related to Void.\n\n### Fonts\n\n- if Firefox isn't displaying some charactes, install the `noto-fonts-ttf`\n  package;\n\n### External display brightness\n\nUse either the `ddcutil` package (requires `i2c-dev` kernel module loaded) or\ninstall the `ddcci-dkms` package and use any regular backlight utility.\n\n#### Using ddcutil\n\n```shell\n# load the needed kernel module\n$ modprobe i2c-dev\n\n# adjust brightness on 1st display\n$ ddcutil -d 1 setvcp 10 70\n\n# adjust brightness on 2st display\n$ ddcutil -d 2 setvcp 10 70\n```\n\n#### Using ddcci-dkms\n\nInstall the DKMS driver and a backlight utility.\n\n```shell\n$ xbps-install -S ddcci-dkms brillo\n```\n\nLoad the module.\n\n```shell\n$ modprobe ddcci\n```\n\nUse the backlight utility as usual.\n\n### Realtek ethernet\n\nEthernet on newest Realtek cards (R8125) doesn't work out of the box (as of\nLinux 5.9). Download the Linux driver from Realtek website and follow the\ninstructions.\n\n---\n\n#### See also\n\n- [XBPS](/notes/xbps)\n- [Void Linux on a laptop](/notes/laptop-void)\n\n---\n\n#### External links\n\n- [Stable Void Linux Setup Guide](https://kennydodrill.net/posts/stable-void-linux-setup-guide/)\n- [rinsmiles ́ Guide to the Void](https://drive.google.com/file/d/1hPPO4h2tD-_uGppOX79MsrHGPkDKmQpG/view)\n- [D-Bus on Void](https://github.com/flexibeast/guides/blob/master/dbus-on-void.md)\n- [Managing suckless software on Void](https://github.com/flexibeast/guides/blob/master/suckless.md)\n- [Managing -git packages on Void](https://github.com/flexibeast/guides/blob/master/git-packages.md)\n\n[void-handbook]: https://docs.voidlinux.org/\n[runit]: https://docs.voidlinux.org/config/services/index.html\n[user-services]: https://docs.voidlinux.org/config/services/user-services.html\n"},{"slug":"wayland","title":"Wayland","tags":["software","linux"],"body":"\n## Apps\n\n### Firefox\n\nRequires the `MOZ_ENABLE_WAYLAND=1` environment variable.\n\n### Chromium\n\nAs of 13/04/2021, start with the following flags:\n\n```\nchromium --enable-features=UseOzonePlatform --ozone-platform=wayland\n```\n"},{"slug":"xbps","title":"XBPS","description":"Short guide on the Void Linux package repository","tags":["software","linux","void"],"body":"\nVoid provides a comprehensive [manual][manual] on how to work with the source\npackages. This guide is focused on a small subset of tasks I often do myself.\n\n[manual]: https://github.com/void-linux/void-packages/blob/master/Manual.md\n\n## Prerequisites\n\n1. Clone the `void-packages` repository and do the initial bootstrap:\n\n```shell\n$ git clone git://github.com/void-linux/void-packages.git\n$ cd void-packages\n$ ./xbps-src binary-bootstrap\n```\n\n2. Install the `xtools` package:\n\n```shell\n$ xbps-install -S xtools\n```\n\n3. Install and setup [GitHub CLI](https://cli.github.com/):\n\n```shell\n$ xbps-install -S github-cli\n$ gh auth login\n```\n\n## Updating an outdated package\n\n1. Update your local repository:\n\n```shell\n$ git pull\n```\n\n2. Make changes to package template in a new git branch (most of the time you\n   only need to update the `version`):\n\n```shell\n$ git checkout -b package-name\n$ vim srcpkgs/package-name/template\n```\n\n3. Update the checksum:\n\n```shell\n$ xgensum -f -i package-name\n```\n\n4. Lint the template for possible errors:\n\n```shell\n$ xlint package-name\n```\n\n5. Build and install the updated package locally:\n\n```shell\n$ ./xbps-src pkg package-name\n$ xi package-name\n```\n\n6. Test the package to make sure it works;\n7. Generate a commit message for the update:\n\n```shell\n$ xbump package-name\n```\n\n8. Create a PR:\n\n```shell\n$ gh pr create\n```\n"},{"slug":"agent-steering","title":"Wrapping up initial version of enemy agent steering","body":"\nyesterday i spent most of the day tracking a weird bug with the physics of AI\nagents. that's the disadvantage of using a 3rd party library — if something\nisn't working as expected, you might spend hours hunting for the origin of the\nproblem and trying to make it work. in my case the weirdness was the result of\nGodot engine defaulting to negative Z axis as \"forward\" for some of its built-in\nmethods, while the steering framework I use expects it to be positive Z. the fix\nwas a 5 min work, but tracking the issue took most of the day :/\n\ni'm tired of working on AI steering at this point. as i mentioned before —\nvector math and physics isn't something i'm very good at. for now, the enemies\nhave a pretty straigforward state machine that is easily extendable and can\ninteract with the steering agent implemented in an enemy. so enemies can switch\nbetween following their target (player), slowing down when target is close,\nmoving away when target is too close and so on... that's more than i need for\nnow.\n"},{"slug":"first-note","title":"First dlog note","body":"\nthis is an experiment. i saw a similar log on the web and it felt like a great\nidea, so i'm gonna start one too. just planning to dump out my brain here by the\nend of day, if i managed to work on something that day.\n\nso... happy with the result of work today. managed to finally figure out how to\nimplement the godot steering AI framework for my specific use-case. not fully\nworking yet, but that just needs execution and polish.\n\nnext up going to refactor all the AI movement and state machine code to use the\nnew steering behavior, that should be now much easier to tweak and grow upon.\n"},{"slug":"fps-gameplay","title":"Refocusing on gameplay","body":"\nLast few evenings/nights/mornings I've been mostly working on random parts that\nwere unfinished.\n\nThe weapon system is now fully in place using a state machine pattern, so now I\ncan actually create all kinds of different weapons including projectile-based\ninstead of only instant hitscans. That was fun to work on as I like implementing\nand using state machines.\n\nI also made a very useful in-game debug panel that works in isolation. Every\nclass can now have a \"debug_info\" dictionary that it updates with keys that I\nwant to track and emits a globally defined signal whenever the values are\nupdated. The debugger is just a separate autoloaded UI panel that listens to\nthat signal and updates the UI on every change. This way I can track any debug\ninfo inside the needed class as just a dictionary and don't have to create\none-off implementations to show it on the screen. It's been very helpful while\nworking on the weapon state machine. It's worth spending time on custom tooling\nas it can save a lot of pain in the long run.\n\n![in-game debug panel](/img/dlog/debug-panel.png)\n\nYesterday I read\n[an article by Derek Yu](https://www.derekyu.com/makegames/deathloops.html)\nwhere he describes two types of \"death loops\" that people often get stuck in\nwhile working on games. Even though nothing i read there is new, it made me\nrealize that I've been neglecting the work on actual gameplay for a while now.\nSo I decided to hold off from spending too much on any non-core-gameplay parts\nfor now. My \"brain dump\" column in Trello is overflowing with random gameplay\nideas that I've been collecting and I want to process it to have an\nunderstanding of where to move. The plan is to spend some time this weekend on\nwriting a rough outline of how I want the main mechanics to work and synergize.\n"},{"slug":"jotdown","title":"Simple web app for throw-away notes","body":"\nI recently discovered the [Svelte](https://svelte.dev/) web framework. Its\napproach seemed quite interesting, so I decided to dive deeper and work through\ntheir [interactive tutorial](https://svelte.dev/tutorial) (which is a really\nwell-designed learning experience).\n\nIt got me hooked.\n\nI was never very proficient in JavaScript, but the ergonomics and API of Svelte\njust looked too good to not try building something with it. Plus it was a good\nchance to get familiar with TypeScript, which Svelte supports.\n\nI started simple and made a very basic note-taking app, which is literally just\na bunch `<textarea>`'s slapped together. I've been using\n[Tot](https://tot.rocks/) on macOS for a while, so I wanted to have something\nsimilar on my Linux machines.\n\nIt's live at <https://jotdown.page> and I've been using it for quick notes\nthroughout the day.\n\nSource code is available [on GitHub](https://github.com/kkga/jotdown).\n\nHere's a quick demo of how it works:\n\n<video controls autoplay loop muted width=\"100%\">\n  <source src='/img/dlog/jotdown.mp4' />\n</video>\n"},{"slug":"new-project","title":"New project, yet again","body":"\nThe FPS project joined the big pile of unfinished prototypes and I’m working on\na new thing again.\n\nIt’s (supposedly) much simpler and it’s 2D. A non-traditional tower-defense game\nwith roguelike elements (I could never get away without some roguelike\nelements).\n\nNon-traditional part is a having a big focus on freeform tower positioning that\naffects and changes the path that mobs need to take to get to their target, as\nopposed to usually having a fixed path in traditional tower-defense game. I’ve\nbeen prototyping and testing this approach for a while and (at least for me) it\nadds a whole new level of depth to positioning and interaction with the map.\n\nI have a bare-bone prototype already, including some essential pieces, like:\n\n- map interactions for placing towers\n- recalculating the paths mobs based on changes in the map\n- system for creating various map “actors” (i.e. towers and mobs) with different\n  stats and actions\n- modifiers (upgrades) that can be added to towers to change their stats\n- timed status effects (buffs/debuffs) that also can be added to towers to\n  modify their stats\n\nLooks like I have all the basic building blocks ready, so next step is creating\nthe initial set of towers and mobs.\n"},{"slug":"not-much-progress","title":"Not much progress","body":"\nnot much progress today as i didn't really get a chance to focus.\n\ni've fixed some issues in the Agent's class state machine (i.e. enemies), but\nstill struggling to get all the state transitions to work properly. thinking i'm\ngonna leave it as if for since they're not the top prio at the moment and get\nback later when i'll need to work on the navigation and pathfinding.\n"},{"slug":"td-demo","title":"Tower defense demo","body":"\nquick demo of the current state of the game.\n\ni've been working on improving various map interactions last few days:\n\n- placing/removing towers\n- highlighting range of towers\n- showing info in the bottom right corner when hovering over towers\n- checking that spawners still have a path before letting player to choose a\n  cell on the map\n\n<video controls autoplay loop muted width=\"100%\">\n    <source src='/img/dlog/td-demo.mp4' />\n</video>\n"},{"slug":"tokei-output","title":"Tokei output","body":"\nI'm also gonna post [tokei](https://github.com/XAMPPRocky/tokei) output here\nfrom time to time. To track how the codebase grows over time.\n\n```\n> tokei src\n-------------------------------------------------------------------------------\n Language            Files        Lines         Code     Comments       Blanks\n-------------------------------------------------------------------------------\n GDScript               64         3479         2435          155          889\n-------------------------------------------------------------------------------\n Total                  64         3479         2435          155          889\n-------------------------------------------------------------------------------\n```\n"},{"slug":"traits-bitflags","title":"Using bit flags in Godot","body":"\nhere's a little tip i wanted to share.\n\nI'm currently working on implementation of various trait effects for the player\ncharacter and after going through a few possible methods to do this, here's what\nI came up with.\n\nsince I'm heavily using Godot's `Resource` classes for generating and storing\nall types of data for in-game use, I have a `StatsRes` class (i always add `Res`\nsuffix to classnames if they extend the base `Resource` class) that serves as a\ncontainer for base character stats like max health, move speed and so on.\n\nin a similar fashion, i'm also storing traits as resources of a `TraitRes` class\nso that I can create new traits through Godot's visual inspector by simply\ncreating and a new resource file of type `TraitRes`. In order to do that, the\n`TraitRes` class needs to export variables that need to be editable through the\ninspector by using a certain notation like:\n\n```gdscript\n# this will show a \"Max Health\" input field in the inspector\n# that accepts integer values\nexport (int) var max_health := 100\n```\n\n[TO BE CONTINUED...] (actually, I never got back to it)\n"},{"slug":"traits","title":"Character development. Traits.","body":"\nas planned, i tried to spend some time over the weekend planning my designs\ninstead of programming... it didn't go well.\n\nalthough i have some understanding of where to move, it's hard to formalize the\ndirection for now for a few reasons: 1) i guess i'm not skilled in game design\nenough to be able to pre-construct an elegant solution on paper; and 2) i\nactually prefer designing from the bottom up.\n\nby the 2nd point i mean it makes more sense to me to start shaping up various\nsmaller parts and mechanics, make some simple implementations and try them out.\nsome of them will feel right and most definitely will lead to more discoveries\nalong the way. this is a more natural process.\n\nso instead of thinking too much i decided that the game (in its current foggy\nvision of being a roguelike FPS) clearly needs some sort of character\ndevelopment. this immediately sparked a bunch of ideas on how it can be\nimplmented and how other parts might work with it.\n\nas I don't want to spend too much time digging into specific solutions, I came\nup with a rather simple trait-based system where the player can choose from a\nvariety of traits that modify certain stats and maybe have some special effects\nlike adding an extra weapon slot or allowing to see the exit on map from the\nstart. The goal is to add gameplay variety where the player can tweak a bunch of\nvariables at certain points in a single run and get different results.\n\ni've already implemented the bare functionality for this, so next step would be\nintegrating it into gameplay by creatign a bunch of initial traits and figuring\nout at which point during a game run the player should choose the next trait.\n"},{"slug":"weapon-system","title":"Weapon system","body":"\nRefactoring day. After wrapping up the initial work on steering AI, I decided to\nswitch to something less challenging for a moment and refactor the weapon\nsystem. I don’t think this game will have too many weapons, but I want each of\nthem to be distinct and a serve a specific combat situation better than others.\nThis means I’ll need a highly configurable weapon creation system with various\nparameters affecting the behavior.\n\nTechnically, I decided to utilize Godot’s `Resource` classes for this: each\nweapon will be a resource with a bunch of parameters. This resource is then\npassed to the main `Weapon` class which handles all the setup internally from\nresource’s variables.\n\nI’m done with the main parts of this already, but I still need to add ability to\ncreate projectile-based weapons, since currently all player weapons are\nbasically instant hitscans. I’m also toying with the idea of creating homing\nprojectiles now that I have the steering system in place, it might be fun. Once\nthe weapon system will be ready, I’m planning to make enemies use it as well. So\nthat some elite enemies can use powerful weapons and have a chance to drop them\non death.\n"},{"slug":"envy","title":"Envy","description":"Light color scheme for Vim with comfortable contrast","tags":["vim"],"body":"\n[Vim](/notes/vim) is a text editor for life. I've switched to using light colors\nfor code and text editing a while ago, but couldn't find a scheme I was happy\nwith. So I made my own.\n\n<ProjectLink title=\"Source code on GitHub\" url=\"https://github.com/kkga/vim-envy\" />\n\n![](https://raw.githubusercontent.com/kkga/vim-envy/master/screenshots/envy.png)\n"},{"slug":"jotdown","title":"Jotdown","description":"Web app for jotting things down","tags":["svelte"],"body":"\nJotdown is a simple app for jotting things down.\n\nIt lives in a browser tab, quick to switch to and quick to navigate with a\nkeyboard. The content is stored in your browser, so you can close the tab and\ncome back to it later.\n\n<ProjectLink url=\"https://jotdown.page\" title=\"jotdown.page\" />\n<ProjectLink url=\"https://github.com/kkga/jotdown\" title=\"Source code on GitHub\" />\n\n<Figure>\n<Img src=\"/img/projects/jotdown1.png\" />\n</Figure>\n\n<Figure>\n<Img src=\"/img/projects/jotdown2.png\" />\n</Figure>\n"},{"slug":"kakoune","title":"Kakoune plugins","description":"Various plugins for the sophisticated text editor","tags":["kakoune","vim"],"body":"\nBeing a [Vim user](/notes/vim), I've been experimenting with\n[Kakoune](https://kakoune.org) for the past year and it became my go-to program\nfor doing any sorts of text- or code-editing. It's a delightful piece of\nsoftware that improves on many Vim concepts. I could never describe it better\nthan\n[Screwtape did](https://gist.github.com/Screwtapello/563628f777f0fc9f4d5fb681058d63ec).\n\nHere's a list of various small (and mostly useless) plugins I've created for\nKakoune.\n\n- **[ui.kak][ui.kak]** -- toggle UI highlighters\n- **[saturn.kak][saturn.kak]** -- dark colorscheme\n- **[envy.kak][envy.kak]** -- light colorscheme, port of my\n  [Vim colorscheme](https://github.com/kkga/vim-envy)\n- **[gdscript.kak][gdscript.kak]** -- syntax hightlighting for\n  [Godot](https://godotengine.org)'s GDScript\n- **[foot.kak][foot.kak]** -- integration for\n  [foot](https://codeberg.org/dnkl/foot)\n- **[todo.kak][todo.kak]** -- toggle checkboxes\n\n[ui.kak]: https://github.com/kkga/ui.kak\n[saturn.kak]: https://github.com/kkga/saturn.kak\n[gdscript.kak]: https://github.com/kkga/gdscript.kak\n[envy.kak]: https://github.com/kkga/envy.kak\n[foot.kak]: https://github.com/kkga/foot.kak\n[todo.kak]: https://github.com/kkga/todo.kak\n"},{"slug":"kks","title":"KKS","description":"Handy Kakoune companion","tags":["kakoune","go"],"body":"\n`kks` is a handy [Kakoune](https://kakoune.org) companion.\n\n`kks` makes it easy to interact with Kakoune sessions by providing a simple\ncommand-line interface which can be utilized by shell scripts.\n\n<ProjectLink url=\"https://github.com/kkga/kks\" title=\"Source code on GitHub\" />\n\n<Grid breakout>\n  <Figure>\n  <Video src='/img/projects/kks.mp4' />\n  </Figure>\n</Grid>\n"},{"slug":"nibar","title":"Nibar","description":"Custom status bar for macOS","tags":["macos"],"body":"\nSimple alternative status bar which displays a list of workspaces and some\nsystem info. Intended for usage with workspace-switching oriented window\nmanagers, like [yabai](https://github.com/koekeishiya/yabai) or\n[Amethyst](https://github.com/ianyh/Amethyst).\n\n<ProjectLink url=\"https://github.com/kkga/nibar\" title=\"Source code on GitHub\" />\n\n<Figure>\n<Img src=\"https://raw.githubusercontent.com/kkga/nibar/master/ss.png\" />\n</Figure>\n"},{"slug":"spacegray","title":"Spacegray","description":"UI theme for Sublime Text","tags":["sublime-text"],"body":"\nSublime Text is an excellent text editor. While it looks great out of the box\ntoday, this wasn't the case when it just appeared several years ago.\n\nSpacegray was one of the first custom UI themes for it and became quite popular:\nit's been installed by ~400k users and has ~7k stars on GitHub.\n\n<ProjectLink url=\"https://github.com/kkga/spacegray\" title=\"Source code on GitHub\" />\n\n<Figure caption=\"Dark variant\">\n<Img src=\"https://raw.githubusercontent.com/kkga/spacegray/master/screenshots/spacegray.png\" />\n</Figure>\n\n<Figure caption=\"Light variant\">\n<Img src=\"https://raw.githubusercontent.com/kkga/spacegray/master/screenshots/spacegray-light.png\" />\n</Figure>\n"},{"slug":"tdx","title":"tdx","description":"CLI todo manager for iCalendar","tags":["go"],"body":"\n`tdx` is a todo manager for [iCalendar](https://en.wikipedia.org/wiki/ICalendar)\nfiles.\n\niCalendar-compatibility means it can be a nice and simple CLI companion to any\nCalDAV-enabled todo program, such as iOS Reminders.\n\n<ProjectLink url=\"https://github.com/kkga/tdx\" title=\"Source code on GitHub\" />\n\n### Features\n\n- adding todos, with automatic date and priority parsing\n- listing todos, sorted/filtered by various fields and organized by hashtags\n  parsed from text\n- completing todos\n- editing todos in a `$VISUAL`/`$EDITOR` program\n- deleting todos\n- purging completed/cancelled todos\n\n<Grid breakout>\n  <Figure video='/img/projects/tdx.mp4' />\n</Grid>\n"},{"slug":"togo","title":"togo","description":"CLI for todo.txt","tags":["go"],"body":"\nCLI for `todo.txt` and an attempt at learning Go.\n\n<ProjectLink url=\"https://github.com/kkga/togo\" title=\"Source code on GitHub\" />\n\n### Usage\n\n```\nUsage:\n  togo [command]\n\nAvailable Commands:\n  add         Add todo\n  clean       Move done todos to done.txt\n  do          Mark todo as done\n  help        Help about any command\n  ls          List todos\n  rm          Remove todo\n\nFlags:\n  -h, --help   help for togo\n\nUse \"togo [command] --help\" for more information about a command.\n```\n\n### Examples\n\n```\n> togo ls\n 1 [ ] 2020-12-03 Add file configuration\n 2 [ ] 2020-12-03 Add support for priorities and `pri`/`depri` command\n 3 [ ] 2020-12-03 Improve output for `do` cmd, show final done state\n 4 [ ] 2020-12-02 call ls in root cmd if no args\n 5 [ ] 2020-12-03 implement viper config\n------\n5/5 todos shown\n```\n\n```\n> togo ls config\n 1 [ ] 2020-12-03 Add file configuration\n 5 [ ] 2020-12-03 implement viper config\n------\n2/5 todos shown\n```\n\nMore examples on GitHub: https://github.com/kkga/togo#examples\n"},{"slug":"stampsy","title":"Stampsy","description":"Platform for sharing visual stories","tags":["work"],"body":"\nStampsy is a social platform for sharing and discovering visual stories.\n\nI worked with the team during 2012--2014 and it was the first start-up company I\njoined full-time after doing mostly freelance work.\n\n---\n\nMy work ranged from full-cycle product and user interface design to front-end\nengineering and CSS styling.\n\nTogether with the team, I've planned the initial scope of the product and its\nfeatures, designed the web application and prototyped a lot of the Stampsy\nEditor interactions in Framer.js.\n\nLater on I moved to building a responsive CSS architecture for the app and\nhelped the front-end team by transforming the design system into reusable and\nstyled React components.\n\n<ProjectLink title=\"Stampsy\" url=\"https://stampsy.com\" />\n\n<Grid breakout>\n  <Figure caption=\"Promo video featuring parts of my user interface work\">\n    <Video src=\"/img/about/stampsy/stampsy-web.mp4\" />\n  </Figure>\n</Grid>\n\n<Figure caption=\"Marketing website I designed in 2014\">\n  <Video src=\"/img/about/stampsy/stampsy-site.mp4\" />\n</Figure>\n\n<Grid breakout className=\"grid-cols-2\">\n  <Figure caption=\"Feed view\">\n  <Img src=\"/img/about/stampsy/stampsy-web-0.png\" />\n  </Figure>\n  <Figure caption=\"Story page\">\n  <Img src=\"/img/about/stampsy/stampsy-web-1.png\" />\n  </Figure>\n  <Figure caption=\"User-curated collection page\">\n  <Img src=\"/img/about/stampsy/stampsy-web-2.png\" />\n  </Figure>\n  <Figure caption=\"Visual editor for creating stories\">\n  <Img src=\"/img/about/stampsy/stampsy-web-3.png\" />\n  </Figure>\n</Grid>\n\n---\n\nIn 2012, before becoming a web platform, Stampsy was an experimental iPad app\nfor creating stories with a simple design editor. I designed and prototyped a\nlot of its touch-based interactions with different tools and codez.\n\n<Grid breakout>\n  <Figure caption=\"Creating and sharing a story in Stampsy iPad app\">\n    <Video src=\"/img/about/stampsy/stampsy-ipad.mp4\" />\n  </Figure>\n</Grid>\n"},{"slug":"webflow","title":"Webflow","description":"Selected projects at Webflow 2015-2021","tags":["work"],"body":"\n[Webflow](https://webflow.com) is a \"no-code\" web platform. I joined the team in\nits early days as one of the first two designers.\n\nStarting from 2015 and until 2021, I've worked on a variety of designer-focused\nproducts ranging from layout systems and animation tools to marketing pages and\niconography in my early days.\n\nThis is a collection of various projects I've worked on during these years.\nLatest and some of the most impactful stuff is still unreleased and, sadly, can\nnot be shown.\n\n---\n\n## Grid\n\n[CSS Grid](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout)\ntransformed the way web developers create layouts. The challenge was to abstract\nsome of the complexity and translate this powerful new layout mechanism into\nWebflow.\n\nCompared to all previous tools designed in Webflow where most properties of an\nelement are adjusted via a panel, we wanted the Grid to be different. Given the\nvisual nature of CSS Grid, we felt that Webflow is the perfect medium to create\na fully visual way of creating grid layouts by utilizing direct on-canvas\nmanipulation.\n\nTogether with the team I've worked on exploring various ways to interact with a\ngrid on canvas. After months of iterations and tests, we came up with a powerful\nand simple solution that fully utilizes Webflow's visual nature for creating\ngrid layouts.\n\n<ProjectLink url=\"https://www.webflow.com/grid\" title=\"Product overview on Webflow\" />\n\n<Grid breakout>\n  <Figure caption=\"Overview of grid's main features\">\n    <Video src=\"/img/about/webflow-grid.mp4\" />\n  </Figure>\n</Grid>\n\n<Figure caption=\"Grid playground built in Webflow for feature release\" >\n  <Img src=\"/img/about/webflow-grid-playground.gif\" />\n</Figure>\n\nShortly after the initial release, we've added a fully visual support for\nworking with\n[Grid template areas](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Grid_Template_Areas),\nmaking it even easier to create and adjust grid layouts using direct on-canvas\nmanipulation.\n\n<Figure caption=\"Defining grid areas on canvas\">\n  <Img src=\"/img/about/webflow-grid-areas-1.gif\" />\n</Figure>\n<Figure caption=\"Dragging elements into grid areas\">\n  <Img src=\"/img/about/webflow-grid-areas-2.gif\" />\n</Figure>\n<Figure caption=\"Adjusting areas for smaller screens\">\n  <Img src=\"/img/about/webflow-grid-areas-3.gif\" />\n</Figure>\n\n---\n\n## Symbol overrides\n\nWebflow’s symbols let authors reuse a common layout across multiple pages -- for\nexample, a navigation bar, a footer, or a sign up form.\n\nUp until now, there was no way of using the same symbol with different content.\nThis limitation greatly decreased the range of cases where symbols can be used.\n\nI've worked on adding dynamic content overrides to symbols, which would let\nauthors define text, images, videos or links that are editable on different\nsymbol instances.\n\nWith this feature, authors can utilize symbols for a much wider range of\nuse-cases by turning various recurring layouts into symbols, each with its own\ncontent. As authors restructure the layout of that symbol, each instance will\npreserve its unique content.\n\n<ProjectLink\n  url=\"https://webflow.com/blog/content-overrides-for-symbols\"\n  title=\"Feature overview on Webflow blog\" />\n\n<Figure caption=\"Defining overrides inside a symbol\">\n  <Img src=\"/img/about/webflow-symbols-1.gif\" />\n</Figure>\n<Figure caption=\"Overriding content on a symbol instance\">\n  <Img src=\"/img/about/webflow-symbols-2.gif\" />\n</Figure>\n<Figure caption=\"Adjusting layout across multiple symbols\">\n  <Img src=\"/img/about/webflow-symbols-3.gif\" />\n</Figure>\n\n---\n\n## Interactions and animations\n\nWhen I started working on \"Interactions 2.0\", Webflow already had simple tools\nto add interactions and animations to elements on a page. However, we wanted a\nmore poweful and flexible solution that would let authors create rich, sequenced\nanimations using a visual timeline. Another goal was to let authors create\nanimations and interactions based on various dynamic inputs, like scroll\nposition or mouse movement.\n\nWhile exploring different approaches for a visual interface, I came up with the\nidea of a simplified vertical timeline that would let authors stack various\n\"actions\" along an axis. The vertical axis can represent either time or a\ndynamic value from user's input, like mouse position or scroll progress.\n\nThis interface metaphor proved to strike a perfect balance between a full-blown\ntimeline usually found in professional animation software and a simple,\nuncomplicated way to create rich animations and interactions.\n\n<ProjectLink\n  url=\"https://webflow.com/interactions-animations\"\n  title=\"Product overview on Webflow\" />\n\n<ProjectLink\n  url=\"https://webflow.com/ix2\"\n  title=\"Launch page that fully utilizes the feature\" />\n\n<Grid breakout>\n  <Figure caption=\"Examples of timed and dynamic animations triggered by various events\">\n    <Grid className=\"grid-cols-4\">\n      <Img src=\"/img/about/webflow-ix-ui-click-actions.jpg\" />\n      <Img src=\"/img/about/webflow-ix-ui-hover-actions.jpg\" />\n      <Img src=\"/img/about/webflow-ix-ui-mouse-actions.jpg\" />\n      <Img src=\"/img/about/webflow-ix-ui-scroll-actions.jpg\" />\n    </Grid>\n  </Figure>\n</Grid>\n\n<Figure caption=\"Overview of creating various animations\" >\n  <Video src=\"/img/about/webflow-ix.mp4\" />\n</Figure>\n<Figure caption=\"Adjusting the easing curve on an intro animation\" >\n  <Video src=\"/img/about/webflow-ix-easing.mp4\" />\n</Figure>\n\n### In the wild\n\nHere are various animations and interactions created using this feature in\nWebflow.\n\n<Grid className=\"grid-cols-2 gap-4\">\n  <Img src=\"/img/about/webflow-ix-cubes.gif\" />\n  <Img src=\"/img/about/webflow-ix-parallax.gif\" />\n  <Img src=\"/img/about/webflow-ix-demo.gif\" />\n  <Img src=\"/img/about/webflow-ix-hover.gif\" />\n</Grid>\n\n---\n\n## Flexbox\n\nFlexbox was one of the first projects I've worked on at Webflow.\n\nThe challenge was to translate a powerful\n[CSS layout mechanism](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)\ninto a simple and intuitive visual interface that allows designers to create\nexpressive, responsive layouts on the web.\n\nThis feature was released in early days of Webflow, when the design team was\njust 2 people. In addition to product design work, I've also built a\n[Flexbox learning game](https://flexboxgame.com) in Webflow and an educational\n[marketing website](https://flexbox.webflow.com) for feature release.\n\nFlexbox remains one of the most used layout tools in Webflow. Since the initial\nrelease in 2016, I've worked on several updates that improve and streamline the\ninterface.\n\n<ProjectLink\n  url=\"https://flexbox.webflow.com\"\n  title=\"Educational site I built for feature release\" />\n<ProjectLink\n  url=\"https://www.flexboxgame.com/\"\n  title=\"Flexbox learning game I built in Webflow\" />\n\n<Grid breakout>\n  <Figure caption=\"Flexbox in action\">\n    <Img src=\"/img/about/webflow-flexbox.gif\" />\n  </Figure>\n</Grid>\n\n<Grid className=\"grid-cols-2\">\n  <Figure caption=\"First iteration of Flexbox controls\" >\n    <Img src=\"/img/about/webflow-flexbox.webp\" />\n  </Figure>\n  <Figure caption=\"Educational marketing website\" >\n    <Img src=\"/img/about/webflow-flexbox-site.webp\" />\n  </Figure>\n</Grid>\n"}]